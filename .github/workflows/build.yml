name: Build Tauri Application

on:
  workflow_dispatch:
    inputs:
      version:
        description: '构建版本号'
        required: false
        type: string
        default: 'dev'
      description:
        description: '构建说明'
        required: false
        type: string
        default: '开发版本'

jobs:
  build:
    runs-on: ubuntu-latest  # You can also use windows-latest or macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for better versioning

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            build-essential \
            curl \
            wget \
            libssl-dev \
            libayatana-appindicator3-dev \
            software-properties-common

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'  # Adjust this to your project's required Node.js version
          cache: 'pnpm'  # Enable pnpm caching

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run tauri build

      - name: Get executable file
        run: |
          mkdir -p output
          cp -r src-tauri/target/release/bundle/* output/

      - name: Upload executable
        uses: actions/upload-artifact@v4
        id: upload-artifact
        with:
          name: tauri-executable
          path: output/
          retention-days: 5  # Keep artifacts for 5 days to save storage

      - name: Get artifact download URL
        run: |
          echo "下载链接："
          echo "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts"
          echo ""
          echo "构建信息："
          echo "版本: ${{ github.event.inputs.version }}"
          echo "说明: ${{ github.event.inputs.description }}"
          echo "运行ID: ${{ github.run_id }}"
          echo "构建时间: $(date '+%Y-%m-%d %H:%M:%S')"

      - name: Generate download URL
        run: |
          echo "构建完成！"
          echo "您可以在 Actions 页面找到构建产物，或通过以下步骤下载："
          echo "1. 点击上方的 'Summary' 链接"
          echo "2. 在页面底部的 'Artifacts' 部分找到 'tauri-executable'"
          echo "3. 点击 'tauri-executable' 即可下载"
          echo "注意：构建产物将在 5 天后自动删除"

  download:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: tauri-executable
          path: downloaded-artifact

      - name: Display structure of downloaded files
        run: ls -R downloaded-artifact
